Introduction to ESP32 - Video
ESP32 CAM - integrated camera

need to install arduino IDE Boards Manager for esp32

copy Json file

file - preferences - Pace in additional boards managers Urls - hit okay

tools - board manager - esp32 - esp32 by espressif Systems

Uploading a sketch

two push buttons - right push button is the upload buttton , en is a reset button

it will connect until you press the button down

WIFI

protocols 802.11 b/g/n
operates at 2.4 ghz
data rate up to 150 mbps
adjustable transmit power 20.5 dbm
supports antenna diversity 

in station mode it is connected to router
in soft access point it is the access point of all devices

In STA mode esp32 gets IP address from router DHCP
In sap mode the ip address comes from clients

USING the ESP32 as a wifi access point


BLUETOOTH
capable of bluetooth low energy
can act as a bluetooth client or server
classic bluetooth for continuous data streaming
wireless headsets, file transer, keyboards or speakers
BLE for fitness bands medical monitors etc

serial terminal for bluetooth on esp32

Finished Video

Summary/Hottakes
- easy to use Bluetooth, has touch sensitive application

Continuing onto ESP32 CAM - 10 Dollar Camera for IoT Projects







ESP32 code structure:

- same structure as arduino code. includes main parts: setup code and loop code
- setup code is code in setup() function
		- setup code is executed right after power up or reset.
		- only executed once
		- setup code is used to initialize variables, pin modes, start using libraries
Loop code is code in loop() function
		- executed right after setup code
		- loop code is executed repeatedly (infinitely)
		- loop code is used to do the main task application

= Setup() and loop() functions must be used in ESP32 code. if not, it generates an error.
= libraries usually end with a .h

- use #define to give a constant definition -> #define MAx_COunt 180
Global variables are outside your setup and loop functions.





From a HLD:

I must measure a signal with the sound booster and pass that to the esp32 that will then transmit to the receiving ESP32 that will translate signal into something noticable.